generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @unique @default(autoincrement())
  name      String   @unique @db.VarChar(300)
  password  String   @db.VarChar(100)
  isAdmin   Boolean  @default(false)
  updatedAt DateTime @updatedAt
}

model Supplier {
  nif          String        @id @unique @db.VarChar(14)
  name         String        @unique @db.VarChar(300)
  email        String?
  phone        String?
  updatedAt    DateTime      @updatedAt
  maintenances Maintenance[]
}

model Maintenance {
  id            Int                 @id @unique @default(autoincrement())
  scheduledDate DateTime
  executedDate  DateTime            @default(now())
  supplierId    String
  status        MaintenanceStatus   @default(PENDING)
  details       String?             @db.VarChar(1000)
  acUnitId      Int
  updatedAt     DateTime            @updatedAt
  acUnit        AirConditioningUnit @relation(fields: [acUnitId], references: [id])
  supplier      Supplier            @relation(fields: [supplierId], references: [nif])
  causes        Cause[]             @relation("CauseToMaintenance")
  diagnoses     Diagnosis[]         @relation("DiagnosisToMaintenance")
  solutions     Solution[]          @relation("MaintenanceToSolution")
}

model Diagnosis {
  id           Int           @id @unique @default(autoincrement())
  type         String        @db.VarChar(500)
  updatedAt    DateTime      @updatedAt
  maintenances Maintenance[] @relation("DiagnosisToMaintenance")
}

model Cause {
  id           Int           @id @unique @default(autoincrement())
  type         String        @db.VarChar(500)
  updatedAt    DateTime      @updatedAt
  maintenances Maintenance[] @relation("CauseToMaintenance")
}

model Solution {
  id           Int           @id @unique @default(autoincrement())
  type         String        @db.VarChar(500)
  updatedAt    DateTime      @updatedAt
  maintenances Maintenance[] @relation("MaintenanceToSolution")
}

model Brand {
  id        Int                   @id @unique @default(autoincrement())
  name      String                @unique @db.VarChar(500)
  updatedAt DateTime              @updatedAt
  acUnits   AirConditioningUnit[]
}

model AirConditioningUnit {
  id               Int           @id @unique @default(autoincrement())
  serialNumber     Int           @unique
  brandId          Int
  model            String        @db.VarChar(500)
  btu              Int
  status           ACUnitStatus  @default(FUNCTIONAL)
  installationDate DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  brand            Brand         @relation(fields: [brandId], references: [id])
  maintenances     Maintenance[]
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ACUnitStatus {
  OUT_OF_SERVICE
  NEEDS_MAINTENANCE
  FUNCTIONAL
}
